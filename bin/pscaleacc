#!/usr/bin/env python3
#
# Makes a plot of a single IJHC in a ModelE run.

#/discover/nobackup/projects/giss_ana/users/pmalexan/E027testEC-ec


import modele.io
from giss.xaccess import *
from giss.functional import *
from giss import xaccess,functional,giutil
import sys
import numpy as np
from giss import ncutil,gidate
import argparse
import itertools

# --------------------------------------------------
# ------ Parse Input Parameters

parser = argparse.ArgumentParser(description='Run scaleacc on a whole directory')
parser.add_argument('run', help='Directory to find acc files')
parser.add_argument('--dates', dest='dates', default='',
    help='Date range to scale (exclusive end): YYYY-MM,YYYY-MM.  Default: all')
parser.add_argument('--output', '-o', dest='odir', default='.',
    help='Output directory')
parser.add_argument('--sections', '-s', dest='sections', default='',
    help='ACC sections to scale, comma-separated (eg: aij,ijhc)')


args = parser.parse_args()
sections = args.sections.split(',')

if len(sections) == 0:
    raise ValueError('Must provide at least one section')

dates = tuple([gidate.parse_date(x) for x in args.dates.split(',')] + [gidate.Date(),gidate.Date()])

if len(dates[0]) == 0:
    if len(dates[1]) == 0:
        dtfilter = lambda dt : False
    else:
        jday1 = gidate.date_to_jday(dates[1])
        dtfilter = lambda dt : gidate.date_to_jday(dt) >= jday1
else:
    jday0 = gidate.date_to_jday(dates[0])
    if len(dates[1]) == 0:
        dtfilter = lambda dt : gidate.date_to_jday(dt) < jday0
    else:
        jday1 = gidate.date_to_jday(dates[1])
        dtfilter = lambda dt : gidate.date_to_jday(dt) >= jday1 or gidate.date_to_jday(dt) < jday0

# --------------------------------------------------
# ------- Fetch the data
rundir = modele.io.Rundir(args.run)


# These should really be read from a file referenced on the command line
#params = {
#    'segment_bases' : [0,1,3,23],
#    '_file_icebin_in' : "/home/rpfische/modele_input/local/landice/pismsheet_g20_icebin_in.nc",
#    'segment_names' : "legacy,sealand,ec"
#}


for date,fname in itertools.filterfalse(lambda x : dtfilter(x[0]), rundir.items()):
    for section in sections:
        ofpat = rundir.scaled_pat_leaf(date[0], date[1])
        print('ofpat', ofpat)
        print('accdir', rundir.accdir)
        scaled_fname = modele.io.scaleacc(ofpat, section, accdir=rundir.accdir, params=params)
        print(scaled_fname)

